{"version":3,"sources":["components/Circles/Circles.jsx","components/CircleSelector/CircleSelector.jsx","App.js","reportWebVitals.js","index.js"],"names":["Circles","props","className","circleNo","map","circle","idx","selectedCircleIdx","onClick","handleCircleSelection","selecteCircledIdx","CircleSelector","App","state","newIdx","setState","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAoCeA,G,YAjCC,SAACC,GACb,OAEI,qBAAKC,UAAU,UAAf,SACAD,EAAME,SAASC,KAAI,SAACC,EAAQC,GAAT,OACpB,qBAEIJ,UAAWD,EAAMM,oBAAsBD,EAAM,WAAa,QAC1DE,QAAS,kBAAMP,EAAMQ,sBAAsBH,IAH/C,UAIML,EAAMS,kBAAN,UAAqCJ,EAAI,KAHtCD,UCiBDM,G,MAvBQ,SAACV,GACpB,OACI,qBAAKC,UAAU,iBAAf,SACCD,EAAME,SAASC,KAAI,SAACC,EAAQC,GAAT,OAChB,wBAEAJ,UAAWD,EAAMM,oBAAsBD,EAAM,WAAa,QAC1DE,QAAS,kBAAMP,EAAMQ,sBAAsBH,IAH3C,SAIEL,EAAMM,oBAAsBD,EAA5B,iBAA4CA,EAAI,EAAhD,qCAAgFA,EAAI,IAHjFD,UCHXF,EAAW,CAAC,IAAK,IAAK,IAAK,KAoClBS,E,4MA/BbC,MAAQ,CACNN,kBAAmB,G,EAGvBE,sBAAwB,SAACK,GACvB,EAAKC,SAAS,CAACR,kBAAmBO,K,uDAGpC,OACI,sBAAKZ,UAAU,MAAf,UACA,wBAAQA,UAAU,aAAlB,qCACE,iCAEI,cAAC,EAAD,CACEO,sBAAuBO,KAAKP,sBAC5BN,SAAUA,EACVI,kBAAmBS,KAAKH,MAAMN,oBAGhC,cAAC,EAAD,CACEE,sBAAuBO,KAAKP,sBAC5BN,SAAUA,EACVI,kBAAmBS,KAAKH,MAAMN,8B,GAvBxBU,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4c3702d9.chunk.js","sourcesContent":["import React from 'react';\nimport './Circles.css';\n\nconst Circles = (props) => {\n    return ( \n\n        <div className='Circles'>\n       {props.circleNo.map((circle, idx) => \n       <div\n           key={circle}\n           className={props.selectedCircleIdx === idx ? 'selected' : 'color'}\n           onClick={() => props.handleCircleSelection(idx)}\n           >{props.selecteCircledIdx === idx ? `${idx+1}` : `${idx+1}`}\n\n           \n       </div>\n       \n       \n       \n       \n       \n       )}\n     </div>\n\n\n\n     \n\n\n\n\n\n\n)};\n\n \nexport default Circles;","import React from 'react';\nimport './CircleSelector.css';\n\nconst CircleSelector = (props) => {\n    return ( \n        <div className='CircleSelector'>\n        {props.circleNo.map((circle, idx) => \n            <button\n            key={circle}\n            className={props.selectedCircleIdx === idx ? 'selected' : 'color'}\n            onClick={() => props.handleCircleSelection(idx)}\n            >{props.selectedCircleIdx === idx ? `Circle ${idx+1} Selected` : `Select Circle ${idx+1}`}</button>\n        )}\n        \n        \n        \n        \n       \n        \n        </div>\n     );\n}\n \n\n\n\nexport default CircleSelector;","import React, { Component } from 'react';\nimport './App.css';\nimport Circles from './components/Circles/Circles'\nimport CircleSelector from './components/CircleSelector/CircleSelector'\n\nconst circleNo = ['0', '1', '2', '3'];\n\n\n\nclass App extends Component {\n  state = {\n    selectedCircleIdx: 0\n  }\n\nhandleCircleSelection = (newIdx) => {\n  this.setState({selectedCircleIdx: newIdx})\n}\nrender() {\nreturn (\n    <div className=\"App\">\n    <header className=\"App-header\">UNIT 3 FINAL ASSESSMENT</header>\n      <main>\n\n          <Circles \n            handleCircleSelection={this.handleCircleSelection}\n            circleNo={circleNo}\n            selectedCircleIdx={this.state.selectedCircleIdx}\n          />\n\n          <CircleSelector\n            handleCircleSelection={this.handleCircleSelection}\n            circleNo={circleNo}\n            selectedCircleIdx={this.state.selectedCircleIdx}\n           />\n\n      </main>\n    </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}